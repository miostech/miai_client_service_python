# coding: utf-8

"""
    API MIAI

    API for integration with MIAI To get started, you need a token where you can get it by do a post request to 'Get account by email and password' and use the token in the header (Authorization: Bearer token) to access the other endpoints 

    The version of the OpenAPI document: 1.0.31
    Contact: oscarsilva@mios.pt
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountPost(BaseModel):
    """
    AccountPost
    """ # noqa: E501
    first_name: StrictStr = Field(description="First name of account")
    last_name: StrictStr = Field(description="Last name of account")
    image_profile: Optional[StrictStr] = None
    email: StrictStr = Field(description="Email of account")
    country: StrictStr = Field(description="Country of account")
    password: StrictStr = Field(description="Password of account")
    phone_number: StrictStr = Field(description="Phone number of account")
    provider: StrictStr = Field(description="Provider of account")
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "image_profile", "email", "country", "password", "phone_number", "provider"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if image_profile (nullable) is None
        # and model_fields_set contains the field
        if self.image_profile is None and "image_profile" in self.model_fields_set:
            _dict['image_profile'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "image_profile": obj.get("image_profile"),
            "email": obj.get("email"),
            "country": obj.get("country"),
            "password": obj.get("password"),
            "phone_number": obj.get("phone_number"),
            "provider": obj.get("provider")
        })
        return _obj


